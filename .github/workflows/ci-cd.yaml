name: CI-CD

on:

  push:
    branches:
      - main

  pull_request:
    branches:
      - main


jobs:

  #----------------------------------------------------------------------------
  #       Continuous Integration (CI): Testing
  #----------------------------------------------------------------------------

  CI:

    runs-on: ubuntu-latest

    steps:

    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Check out repository
      uses: actions/checkout@v3

    # install & configure poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1 # v1.2.0
      with:
        version: 1.2.0a2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    # load cached venv if cache exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv1-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    # install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --only default,lint,test,release --extras fit --extras viz

    # install your root project
    - name: Install library
      run: poetry install --with default,lint,test,release --extras fit --extras viz

    - name: Format with Black
      run: poetry run black .

    # - name: Test with pytest
    #   run: poetry run pytest tests/ --cov=metaDMG --cov-report=xml

    # # Use Codecov to track coverage
    # - uses: codecov/codecov-action@v2
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # required for private repos
    #     file: ./coverage.xml    # coverage report
    #     fail_ci_if_error: false  # terminate workflow if an error occurs

    # # Build documentation
    # - name: Build documentation
    #   run: poetry run make html --directory docs/


  # ----------------------------------------------------------------------------
  #       Continuous Development (CD): Publishing
  # ----------------------------------------------------------------------------

  CD:

    # Only run this job if the "CI" job passes
    needs: CI

    # Only run this job if the "main" branch changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # continue-on-error: true

    # Set up operating system
    runs-on: ubuntu-latest

    steps:

    # Set up Python 3.9
    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    # Check-out repository so we can access its contents
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install & configure poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1 # v1.2.0
      with:
        version: 1.2.0a2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true


    # load cached venv if cache exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-CD-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    # Install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --only release

    # Setup PSR
    - name: Python Semantic Release Setup
      run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

    # Use PSR to make release
    - name: Python Semantic Release
      # https://github.com/marketplace/actions/command-output
      uses: mathiasvr/command-output@v1
      id: cmd
      with:
        run: poetry run semantic-release publish


    - name: Test1
      if: ${{ steps.cmd.outputs.stdout ==  ''}}
      run: echo Test1.

    - name: Test2
      if: ${{ steps.cmd.outputs.stdout !=  ''}}
      run: echo Test2.


    - name: Test3
      if: "${{ steps.cmd.outputs.stdout ==  ''}}"
      run: echo Test3.

    - name: Test4
      if: "${{ steps.cmd.outputs.stdout !=  ''}}"
      run: echo Test4.

    - name: Test5
      if: hashFiles('./dist/*') != ''
      run: echo Test5.

    - name: Test6
      if: hashFiles('./dist/*') == ''
      run: echo Test6.

    # - name: Break
    #   if: ${!{ steps.cmd.outputs.stdout }}
    #   run: echo No releases will be made. Break.

    # # Publish to TestPyPI
    # - name: Publish to TestPyPI
    #   if: ${{ steps.cmd.outputs.stdout }}
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #     repository_url: https://test.pypi.org/legacy/
    #     skip_existing: true
    #   continue-on-error: true

    # # Test install from TestPyPI
    # - name: Test install from TestPyPI
    #   if: ${{ steps.cmd.outputs.stdout }}
    #   run: |
    #       pip install \
    #       --index-url https://test.pypi.org/simple/ \
    #       --extra-index-url https://pypi.org/simple \
    #       metaDMG

    # # Publish to PyPI
    # - name: Publish to PyPI
    #   if: ${{ steps.cmd.outputs.stdout }}
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}
    #     skip_existing: true
