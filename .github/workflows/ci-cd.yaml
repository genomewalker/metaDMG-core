name: CI-CD

on:

  push:
    branches:
      - main

  pull_request:
    branches:
      - main


jobs:

  #----------------------------------------------------------------------------
  #       Continuous Integration (CI): Testing
  #----------------------------------------------------------------------------

  CI:

    runs-on: ubuntu-latest

    steps:

    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Check out repository
      uses: actions/checkout@v2

    # install & configure poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1 # v1.2.0
      with:
        version: 1.2.0a2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    # load cached venv if cache exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    # # update lock file dependencies if cache does not exist
    # - name: Update .lock file
    #   run: poetry update

    # install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # install your root project, if required
    - name: Install library
      run: poetry install --no-interaction

    - name: Format with Black
      run: poetry run black .

    - name: Test with pytest
      run: poetry run pytest tests/ --cov=metaDMG --cov-report=xml

    # Use Codecov to track coverage
    - uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # required for private repos
        file: ./coverage.xml    # coverage report
        fail_ci_if_error: false  # terminate workflow if an error occurs

    # # Build documentation
    # - name: Build documentation
    #   run: poetry run make html --directory docs/


  #----------------------------------------------------------------------------
  #       Continuous Development (CD): Publishing
  #----------------------------------------------------------------------------

  CD:

    # Only run this job if the "CI" job passes
    needs: CI

    # Only run this job if the "main" branch changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    continue-on-error: true

    # Step 1. Set up operating system
    runs-on: ubuntu-latest

    steps:

      # Step 2. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    # Step 3. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

      # Step 4. Use PSR to make release
    - name: Python Semantic Release
      run: |
          pip install python-semantic-release
          git config user.name github-actions
          git config user.email github-actions@github.com
          semantic-release publish

    # Step 5. Publish to TestPyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
      continue-on-error: true

    # Step 6. Test install from TestPyPI
    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          metaDMG

    # Step 7. Publish to PyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
